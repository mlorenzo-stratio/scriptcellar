#!/bin/bash -e

# debug option
export VERBOSE="no"
declare script_home
script_home="$(dirname "$0")"
export script_home

# default values
declare -A defaults=(
            [list]="$script_home/certs.list"
            [ca_bundle]="$script_home/ca/ca.bundle"
            [ca_info]="$script_home/ca/ca.info"
            [password]="stratio"
)

### GLOBAL VARIABLES ###
declare vault_host
declare vault_port
declare vault_token

# source common functions
source "$script_home/common/funcvars"

# help function
function help(){
    cat <<EOH
Usage:
    Generate all certs defined in '${defaults[list]}'
       $0 -l <certs_list> -b <ca_bundle> -a <ca_info> -p <password> -v <vault_host> -o <vault_port> -t <vault_token>
    Generate Vault certificates before anything.
       $0 generate_cert <CN> <DNS:dns1> <DNS:dns2> <IP:ip1> <IP:ip2> ... <IP:ipN> <DNS:dnsN>

Default values:
    certs_list: '${defaults[list]}'
    ca_bundle:   '${defaults[ca_bundle]}'
    ca_info:     '${defaults[ca_info]}'
    password:    '${defaults[password]}'


Example of config_file:

admin-router | "IP:10.200.0.25,DNS:adminrouter.labs.stratio.com,DNS:master-1.labs.stratio.com,DNS:master-1" | stratio-paas/admin-router/x509-server-cert
filebeat | "DNS:master-1.labs.stratio.com,DNS:metrics-1,DNS:agent-2.labs.stratio.com,DNS:agent-2,DNS:agent-3.labs.stratio.com,DNS:agent-3" | stratio-paas/filebeat/x509-auth/x509-client-cert
gosec-management | "DNS:gosec3.labs.stratio.com,DNS:gosec3" | gosec/gosec-management/tls/x509-server-cert
gosec-sso | "DNS:gosec2.labs.stratio.com,DNS:gosec2" | gosec/gosec-sso/tls/x509-server-cert gosec/gosec-sso/kafka/x509-auth/x509-client-cert
gosec-kafka | "DNS:gosec1.labs.stratio.com,DNS:gosec1,DNS:gosec2.labs.stratio.com,DNS:gosec2,DNS:gosec3.labs.stratio.com,DNS:gosec3" | gosec/gosec-kafka/tls/x509-server-cert
metronome | "IP:10.200.0.25,DNS:metronome.labs.stratio.com,DNS:master-1.labs.stratio.com,DNS:master-1" | stratio-paas/metronome/tls/x509-server-cert
audit-job | "DNS:audit-job.marathon.mesos" | gosec/gosec-spark-admin-job/kafka/x509-auth/x509-client-cert
viewer1 | "DNS:viewer4.marathon.mesos" | viewer/$name/x509-auth/x509-client-cert
viewer-client | "DNS:viewer-client.marathon.mesos" | viewer/$name/tls/x509-server-cert
crossdata1.labs.stratio.com | "DNS:crossdata.marathon.mesos,DNS:marathon-lb.marathon.mesos" | crossdata/$name/tls/x509-server-cert crossdata/$name/gosec-plugin/x509-auth/x509-client-cert
crossdata2.labs.stratio.com | "DNS:crossdata.marathon.mesos,DNS:marathon-lb.marathon.mesos" | crossdata/$name/tls/x509-server-cert crossdata/$name/gosec-plugin/x509-auth/x509-client-cert
metrics-kafka | "DNS:metrics1.labs.stratio.com,DNS:metrics1" | stratio-paas/metrics-kafka/tls/x509-server-cert
telegraf | "DNS:master-1.labs.stratio.com,DNS:master-1,DNS:agent-2.labs.stratio.com,DNS:agent-2,DNS:agent-3.labs.stratio.com,DNS:agent-3" | stratio-paas/telegraf/x509-auth/x509-client-cert
EOH
}

function main (){
    local cert
    local key
    local tmplist
    local folder
    local generate_cert
    if [[ $1 = "generate_cert" ]]; then
        generate_cert="true"
        shift
        tmplist="$1 | \""
        shift
        while [ $# -gt 0 ]; do
            tmplist+="$1," # DNS:vault.service.gosec.consul IP:1.2.3.4
            shift
        done
        tmplist=${tmplist%,}
        tmplist="$tmplist\""
        list=$(mktemp -p /dev/shm -t .list.XXXX)
        echo -e "$tmplist" > "$list"
    else
        while getopts "l:d:b:a:p:v:o:t:h" opt; do
            case $opt in
                l) list=$OPTARG ;;
                b) local ca_bundle=$OPTARG ;;
                a) local ca_info=$OPTARG;;
                p) local password=$OPTARG;;
                v) vault_host=$OPTARG;;       ### GLOBAL VARIABLES ###
                o) vault_port=$OPTARG;;       ### GLOBAL VARIABLES ###
                t) vault_token=$OPTARG;;      ### GLOBAL VARIABLES ###
                h|*) help ; exit 1; ;;
            esac
        done
    fi
    list=${list:-${defaults[list]}}
    ca_bundle=${ca_bundle:-${defaults[ca_bundle]}}
    ca_info=${ca_info:-${defaults[ca_info]}}
    password=${password:-${defaults[password]}}

    # Check for openssl command and fail if not found
    if ! which openssl > /dev/null; then
        echo "Script '$0' needs openssl command to run."
        exit 1
    fi

    # Define Vault default port if not specified
    vault_port=${vault_port:-"8200"}

    # Check for correct arguments if not generating Vault certificate
    if [[ ! $generate_cert ]]; then
        check_arg "$vault_host" "Vault host"
        check_arg "$vault_token" "Vault token"
    fi

    # Use autogenerated folder
    folder=$(mktemp -p /dev/shm -d -t .certs.XXXX)

    # verify files & folders availability
    verify "f:$list" "f:$ca_bundle" "f:$ca_info"

    # Print info
    if [[ ! $generate_cert ]]; then
        cat <<SHOW_OPTIONS
Running with config:
    config_file: '${list}'
    ca_bundle:   '${ca_bundle}'
    ca_info:     '${ca_info}'
    password:    '${password}'
SHOW_OPTIONS
    else
        cat <<SHOW_OPTIONS
Running with config:
    ca_bundle:   '${ca_bundle}'
    ca_info:     '${ca_info}'
    password:    '${password}'
SHOW_OPTIONS
    fi

    while IFS=$'| ' read name san vault_urls; do
        # Skip blank lines and commented lines
        if [[ ! $name ]] || [[ $name =~ ^[[:space:]]*# ]] ; then continue ; fi
        _name=${name%%.*}
        local _san=${san//DNS:/ }
        _san=${_san//\"/}
        cat <<EOF > "${folder}/openssl.conf"
[req]
prompt = no
distinguished_name = dn
req_extensions = ext
input_password = ${password}

[dn]
CN = ${name}
O = Stratio
L = Madrid
C = ES

[ext]
subjectAltName = ${san}
EOF
        mkdir -p .certs
        echo -e "\n\n[$name] SAN:${_san}"
        echo -e "  >> Generating REQ..."
        _run "openssl req -new \
                    -newkey rsa:2048 \
                    -keyout \"${folder}/${_name}.key\" \
                    -out \"${folder}/${_name}.csr\" \
                    -config \"${folder}/openssl.conf\" \
                    -passout \"pass:${password}\""
        echo -e "  >> Generating CRT..."
        _run "openssl ca -passin \"pass:${password}\" \
                   -batch -config \"$ca_info\" \
                   -in \"${folder}/${_name}.csr\" \
                   -out \"${folder}/${_name}.crt\" \
                   -extensions server_ext"
        echo -e "  >> Generating bundle..."
        _run "cat \"${folder}/${_name}.crt\" \"$ca_bundle\" | tee \"${folder}/${_name}.pem\""
        #echo -e "  >> Generating PKCS12..."
        #_run "openssl pkcs12 -password \"pass:${password}\" \
        #               -export -inkey \"${folder}/${_name}.key\" \
        #               -in \"${folder}/${_name}.pem\" \
        #               -out \"${folder}/${_name}.pkcs12\" \
        #               -passin \"pass:${password}\""
        #echo -e "  >> Generating keystore..."
        #_run "keytool -noprompt \
        #        -importkeystore \
        #        -srckeystore \"${folder}/${_name}.pkcs12\" \
        #        -srcstorepass \"${password}\" \
        #        -deststorepass \"${password}\" \
        #        -srcstoretype PKCS12 \
        #        -destkeystore \"${folder}/${_name}.keystore\""
        echo -e "  >> Generating KEY with password included..."
        _run "openssl rsa -in \"${folder}/${_name}.key\" \
                    -out \"${folder}/${_name}.key\" \
                    -passin \"pass:${password}\""

        # Escape special chars for cert and key files
        cert=$(sed ':a;N;$!ba;s/\n/\\\\n/g' "${folder}/${_name}.pem")
        key=$(sed ':a;N;$!ba;s/\n/\\\\n/g' "${folder}/${_name}.key")
        vault_urls=$(eval echo "$vault_urls")
        if [[ $vault_urls ]] ; then
            # Upload to Vault if vault_url was specified
            echo
            for url in $vault_urls; do
                echo "[Vault] Uploading certificate to $url ..."
                envault "$url" "{ \\\"certificate_chain\\\":\\\"$cert\\\", \\\"private_key\\\":\\\"$key\\\"  }"
            done
        else
            # In case no vault_url was specified we will generate certificate bundle and key on PWD
            echo -e "\nGenerated '${_name}.pem'"
            cp "${folder}/${_name}.pem" "${_name}.pem"
            echo "Generated '${_name}.key'"
            cp "${folder}/${_name}.key" "${_name}.key"
        fi
    done < "$list"

    # Remove forged list to create Vault certificate.
    if [[ $generate_cert ]]; then
        rm -fr "$list"
    fi
    # clean .certs
    rm -fr .certs/*
    rm -fr "${folder:?}" # remove temp folder as it is directly uploaded to Vault
}

main "$@"